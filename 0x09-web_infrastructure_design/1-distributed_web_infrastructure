# Distributed Web Infrastructure â€” Three Server Setup Hosting www.foobar.com

## Whiteboard Diagram

![Simple Web Stack Diagram](./1-distributed_web_infrastructure.jpg)

---

## **Infrastructure Components**

- **Domain**: www.foobar.com has a DNS A record that directs traffic to the load balancer's public IP.

- **Load Balancer**: A single HAProxy instance distributes incoming traffic between the two application servers.

- **Application Servers**: There are two servers (A and B), and each is configured with an Nginx web server, an application server, and the application's code base.

- **Database**: A MySQL database is configured in a Primary-Replica setup to ensure data redundancy.

---

## **Why each element is added**

1. **Load Balancer (HAProxy)**: Distributes traffic to the backend servers, which improves availability, performance, and scalability.

2. **Primary-Replica Database**: Enhances data redundancy and read performance, as the replica can be used for read-heavy queries or for failover.

3. **Extra Application Server**: Provides redundancy and allows the system to handle more traffic. If one server fails, the other can continue serving requests.

---

## **Load Balancer Distribution Algorithm**

**Algorithm:** Round Robin

- How It Works: The load balancer routes each new request to the next server in the list, then loops back to the beginning.

- Example: The first request goes to Server A, the second to Server B, the third back to Server A, and so on.

- Benefit: This method ensures traffic is distributed evenly, which is ideal when all servers have similar processing power.

---

## **Active-Active vs Active-Passive**

- **Active-Active:**

    - How It Works: All backend servers are actively handling requests simultaneously.

    - Traffic Distribution: The load balancer sends traffic to all available servers.

    - Benefit: This leads to higher resource utilization and improved performance.

- **Active-Passive:**
    - How It Works: Only one server actively handles requests at a time.

    - Traffic Distribution: The load balancer directs all traffic to the primary server. The second server is on standby.

    - Benefit: This setup is less efficient in terms of resource usage but can be easier to manage.

** Our infrastructure is configured as Active-Active, which means both application servers are simultaneously handling traffic.

---

## **Primary-Replica (Master-Slave) Database Cluster

     - **Primary Node (Master): Handles all write operations (INSERT, UPDATE, DELETE).

     - **Replica Node (Slave): Receives replicated data from the Primary and is used for read-only queries.

    **Replication can be asynchronous (with potential lag) or semi-synchronous.

Benefits:

    - Reduces the read load on the Primary server.

    - Offers redundancy if the Primary node fails.

---

## **Differences between Primary and Replica in the application**

- **Primary**: The application connects here to perform any write operations.

- **Replica**: The application connects here for all read-only tasks, such as analytics or searching.

---

## **Issues with this infrastructure**

1. **Security Issues**

    - No firewall means servers are directly exposed to the internet.

    - No HTTPS means data is sent in plain text, making it vulnerable to interception.

2. **No Monitoring**

    - There are no health checks or alerts, which means performance issues can go unnoticed.

3. **SPOF (Single Point of Failure)**

    - The load balancer is a SPOF unless made redundant.

    - The Primary database is a SPOF for all write operations.

